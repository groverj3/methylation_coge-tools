#!/usr/bin/env python3

__author__ = 'groverj3'

import csv
import os.path
from argparse import ArgumentParser


# Function to determine if you've passed a valid filename

def file_validity(parser, arg):
    if not os.path.exists(arg):
        parser.error('%s is not a valid file path.' % arg)
    else:
        return open(arg, 'r')


# Parse command line file path, store in variable

parser = ArgumentParser(description='CoGe-ifier for PileOMeth converts context-specific methylation call files '
                                    'generated by PileOMeth into .csv format for compatibility with CoGe\'s '
                                    'LoadExperiment Functionality')
parser.add_argument('input_file', help='Input Bismark context-specific methylation calls', metavar='File')
methyl_path = parser.parse_args().input_file
file_validity(parser, methyl_path)  # Check validity of input filename

# Output file is input_file_path.coge.csv

coge_path = '%s.coge.csv' % methyl_path

# Let the user know it's working

print('Calculating % Methylation on a per Cytosine Basis and formatting for CoGe-import from:\n', methyl_path,
      '\n Saving CoGe-formatted file to:\n', coge_path)

# Open the PileOMeth output file and create an output for CoGe upload

with open(methyl_path, 'r') as pileometh_bedgraph, open(coge_path, 'w') as coge_csv:
    pileometh_summary = csv.reader(pileometh_bedgraph, delimiter='\t')
    coge_formatted = csv.writer(coge_csv)

    next(pileometh_summary)  # Skip header

    for row in pileometh_summary:
        chrm = row[0]
        pos = row[1]
        met_reads = int(row[4])
        unmet_reads = int(row[5])
        total_reads = met_reads + unmet_reads
        dec_met = met_reads / total_reads
        coge_formatted.writerow([chrm, pos, pos, 1, dec_met, total_reads])

    print('\nDone!')
