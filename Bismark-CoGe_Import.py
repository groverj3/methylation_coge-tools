#!/usr/bin/env python3

__author__ = 'groverj3'

import csv
import os.path
from argparse import ArgumentParser


# Function to determine if you've passed a valid filename

def file_validity(parser, arg):
    if not os.path.exists(arg):
        parser.error('%s is not a valid file path.' % arg)
    else:
        return open(arg, 'r')


# Function to return number from a string, to extract chromosome number from string

def get_int(string):
    return int(''.join(substring for substring in string if substring.isdigit()))


# Parse command line arguments, store in variables

parser = ArgumentParser(description='CoGe-ifier for Bismark converts context-specific methylation call files '
                                    'generated by Bismark into .csv format for compatibility with CoGe\'s '
                                    'LoadExperiment Functionality')
parser.add_argument('--comprehensive', help='Input comprehensive Bismark context-specific methylation calls',
                    metavar='File')
parser.add_argument('--OT', help='Input original top strand context-specific methylation calls', metavar='File')
parser.add_argument('--OB', help='Input original bottom strand context-specific methylation calls', metavar='File')
parser.add_argument('-o', '--output', help='Output file prefix. Default = metC', default='metC', metavar='File')
parser.add_argument('-c', '--coverage', type=int,
                    help='Minimum coverage to report in an additional output .csv. Default = 1 (Unfiltered)')
parser.add_argument('-u', '--unfiltered', default='t', choices=['t', 'f'],
                    help='Outputs an unfiltered .csv. Default = t')
min_coverage = parser.parse_args().coverage
unfiltered = parser.parse_args().unfiltered
output = parser.parse_args().output

# Save paths for later-use

coge_filtered_path = '%s.filtered.coge.csv' % output
coge_unfilitered_path = '%s.coge.csv' % output

comprehensive_path = None
top_path = None
bottom_path = None
if parser.parse_args().comprehensive:
    comprehensive_path = parser.parse_args().comprehensive
if parser.parse_args().OT:
    top_path = parser.parse_args().OT
if parser.parse_args().OB:
    bottom_path = parser.parse_args().OB

# Check validity of input/output path

if comprehensive_path:
    file_validity(parser, comprehensive_path)
if top_path:
    file_validity(parser, top_path)
if bottom_path:
    file_validity(parser, bottom_path)

# Let the user know it's working

print('Calculating % Methylation on a per Cytosine Basis and formatting for CoGe-import from:')
if comprehensive_path:
    print(comprehensive_path)
if top_path:
    print(top_path)
if bottom_path:
    print(bottom_path)

# Open the Bismark Methylation Extractor files add to a list

input_list = []

if comprehensive_path:
    input_list.append(comprehensive_path)
if top_path:
    input_list.append(top_path)
if bottom_path:
    input_list.append(bottom_path)

# Initialize a dictionary that will serve at the primary data structure and define a function to parse the Bismark files

bismark_dict = {}


def parse_bismark(bismark_summary):
    comprehensive = None
    top = None
    bottom = None
    if bismark_summary == comprehensive_summary:
        comprehensive = True
    elif bismark_summary == top_summary:
        top = True
    elif bismark_summary == bottom_summary:
        bottom = True
    next(bismark_summary)  # Skip header row
    for row in bismark_summary:
        chrm = row[2]  # Chromosome number saved to "chrm"
        pos = row[3]  # Position saved to "pos"
        met = row[1]  # methylation status saved to "met"
        if chrm not in bismark_dict:  # Add chromosome number as key if not in dict
            bismark_dict[chrm] = {}  # Make its value an empty dict
        if pos not in bismark_dict[chrm]:  # Add position as key in second level if not already in dict
            bismark_dict[chrm][pos] = {'metc': 0, 'total': 0}  # Make its value the running counts of methyl status
        if met == '+':
            bismark_dict[chrm][pos]['metc'] += 1
            bismark_dict[chrm][pos]['total'] += 1  # Add 1 to total and metc counts if methylated
        elif met == '-':
            bismark_dict[chrm][pos]['total'] += 1  # Add 1 to total count if unmethylated
        if comprehensive:
            bismark_dict[chrm][pos]['strand'] = 1  # Store strand as 1 is from the comprehensive report or OT file
        elif top:
            bismark_dict[chrm][pos]['strand'] = 1
        elif bottom:
            bismark_dict[chrm][pos]['strand'] = -1  # Store strand as -1 if from the OB file


# Loop over and parse the input files

comprehensive_summary = None
top_summary = None
bottom_summary = None

for file in input_list:
    if file == comprehensive_path:
        comprehensive_tsv = open(comprehensive_path, 'r')
        comprehensive_summary = csv.reader(comprehensive_tsv, delimiter='\t')
        parse_bismark(comprehensive_summary)
    if file == top_path:
        top_tsv = open(top_path, 'r')
        top_summary = csv.reader(top_tsv, delimiter='\t')
        parse_bismark(top_summary)
    if file == bottom_path:
        bottom_tsv = open(bottom_path, 'r')
        bottom_summary = csv.reader(bottom_tsv, delimiter='\t')
        parse_bismark(bottom_summary)

# Iterate over the nested dictionary to get percent methylation as decimal and add as new key:value pair

for chrm in bismark_dict:
    for pos in bismark_dict[chrm]:
        bismark_dict[chrm][pos]['dec_met'] = float(bismark_dict[chrm][pos]['metc']) / float(
            bismark_dict[chrm][pos]['total'])  # Calculate methylation as a decimal

# Talk to the user

if min_coverage:
    print('Saving CoGe-formatted and coverage-filtered file to:\n', coge_filtered_path)
if unfiltered == 't':
    print('Saving CoGe-formatted unfiltered file to:\n', coge_unfilitered_path)

# Create an output for CoGe upload

if min_coverage:
    coge_filtered_csv = open(coge_filtered_path, 'w')
    coge_formatted_filtered = csv.writer(coge_filtered_csv)
if unfiltered == 't':
    coge_unfiltered_csv = open(coge_unfilitered_path, 'w')
    coge_formatted_unfiltered = csv.writer(coge_unfiltered_csv)

# Iterate over the dictionary for file-outputs

for chrm in bismark_dict:
    for pos in bismark_dict[chrm]:  # Nested loop
        chrm_key = get_int(chrm)  # Save chromosome number key, position key, and methylation fraction
        pos_key = pos
        dec_met = bismark_dict[chrm][pos]['dec_met']
        total = bismark_dict[chrm][pos]['total']
        strand = bismark_dict[chrm][pos]['strand']
        if min_coverage and total >= min_coverage:
            coge_formatted_filtered.writerow(
                [chrm_key, pos_key, pos_key, strand, dec_met, total])  # Output as filtered .csv file
        if unfiltered == 't':
            coge_formatted_unfiltered.writerow(
                [chrm_key, pos_key, pos_key, strand, dec_met, total])  # Output as unfiltered .csv file

# Ultimate victory

print('\nDone!')
