__author__ = 'groverj3'

import csv
from argparse import ArgumentParser
import os.path

# Determine if you've passed a valid filename

def file_validity(parser, arg):
    if not os.path.exists(arg):
        parser.error('%s is not a valid file path.' % arg)
    else:
        return open(arg, 'r')

# Parse command line file paths store in variables

parser = ArgumentParser(description='CoGe-ifier for Bismark converts context-specific methylation call files '
                                             'generated by Bismark into .csv format for compatibility with CoGe\'s '
                                             'LoadExperiment Functionality')
parser.add_argument('-i', dest='filename', required=True, help='Input Bismark context-specific methylation calls',
                    metavar='File', type=lambda x: file_validity(parser, x))
parser.add_argument('-o', dest='filename', required=False, help='Output .csv file for CoGe-mport', metavar='File'
                    type=lambda x: file_validity(parser, x))
args = parser.parse_args()
methyl_path, coge_path = read(args.filename)

# Let the user know it's working

print('Calculating % Methylation on a per Cytosine Basis and formatting for CoGe-import from:\n', methyl_path, '\n'
'Saving CoGe-formatted file to:\n', coge_path)

# Open the Bismark Methylation Extractor output file and create an ouput for CoGe upload

with open(methyl_path, 'r') as bismark_tsv, open(coge_path, 'w') as coge_csv:
    bismark_summary = csv.reader(bismark_tsv, delimiter='\t')
    coge_formatted = csv.writer(coge_csv)

    # Initialize a dictionary that will serve at the primary data structure

    bismark_dict = {}

    # Iterate over the tsv file rows updating the dictionary as it goes

    for row in bismark_summary:
        chrm = row[2]  # Chromosome number saved to "chrm"
        pos = row[3]  # Position saved to "pos"
        met = row[1]  # methylation status saved to "met"
        if chrm not in bismark_dict:  # Add chromosome number as key if not in dict
            bismark_dict[chrm] = {}  # Make its value an empty dict
        if pos not in bismark_dict[chrm]:  # Add position as key in second level if not already in dict
            bismark_dict[chrm][pos] = {'metc': 0, 'total': 0}  # Make its value the running counts of methyl status
        if met == '+':
            bismark_dict[chrm][pos]['metc'] += 1
            bismark_dict[chrm][pos]['total'] += 1  # Add 1 to total and metc counts if methylated
        else:
            bismark_dict[chrm][pos]['total'] += 1  # Add 1 to total count if unmethylated

    # Iterate over the nested dictionary to get percent methylation as decimal and add as new key:value pair

    for chrm in bismark_dict:
        for pos in bismark_dict[chrm]:
            bismark_dict[chrm][pos]['dec_met'] = float(bismark_dict[chrm][pos]['metc']) / float(
                bismark_dict[chrm][pos]['total'])  # Calculate methylation as a decimal

    # Iterate over the dictionary for file-output

    for chrm in bismark_dict:
        for pos in bismark_dict[chrm]:  # Nested loop
            chrm_key = chrm  # Save chromosome number key, position key, and methylation decimal
            pos_key = pos
            dec_met = bismark_dict[chrm][pos]['dec_met']
            total = bismark_dict[chrm][pos]['total']
            coge_formatted.writerow([chrm_key, pos_key, pos_key, 1, dec_met, total])  # Output as .csv file

    # Ultimate victory

    print('\nDone!')