#!/usr/bin/env python3

import csv
import os.path
from argparse import ArgumentParser
from sys import exit

from fix_chromosome_id import fix_chromosome_id

__author__ = 'groverj3'

# Define functions


def file_validity(parser, arg):  # Determine file validity
    if not os.path.exists(arg):
        parser.error('%s is not a valid file path.' % arg)
    else:
        pass


def parse_bismark(bismark_summary, input_dict, strandedness):  # Parse bismark_summary file and add to input_dict
    next(bismark_summary)  # Skip header row
    for row in bismark_summary:
        chrm = row[2]  # Chromosome number saved to "chrm"
        pos = row[3]  # Position saved to "pos"
        met = row[1]  # Methylation status saved to "met"
        if chrm not in input_dict:
            input_dict[chrm] = {}
        if pos not in input_dict[chrm]:
            input_dict[chrm][pos] = {'metc': 0, 'total': 0}  # Make its value the running counts of methyl status
        if met == '+':
            input_dict[chrm][pos]['metc'] += 1
            input_dict[chrm][pos]['total'] += 1  # Add 1 to total and metc counts if methylated
        elif met == '-':
            input_dict[chrm][pos]['total'] += 1  # Add 1 to total count if unmethylated
        if strandedness == 'comprehensive':
            input_dict[chrm][pos]['strand'] = 1  # Store strand as 1 is from the comprehensive report or OT file
        elif strandedness == 'top':
            input_dict[chrm][pos]['strand'] = 1
        elif strandedness == 'bottom':
            input_dict[chrm][pos]['strand'] = -1  # Store strand as -1 if from the OB file


# Parse command line arguments, store in variables

parser = ArgumentParser(description='CoGe-ifier for Bismark converts context-specific methylation call files '
                                    'generated by Bismark into .csv format for compatibility with CoGe\'s '
                                    'LoadExperiment Functionality')

parser.add_argument('--comprehensive',
                    help='Input comprehensive Bismark context-specific methylation calls',
                    metavar='File')

parser.add_argument('--OT',
                    help='Input original top strand context-specific methylation calls',
                    metavar='File')

parser.add_argument('--OB',
                    help='Input original bottom strand context-specific methylation calls',
                    metavar='File')

parser.add_argument('-o', '--output',
                    default='metC',
                    help='Output file prefix',
                    metavar='File')

parser.add_argument('-u', '--unfiltered',
                    default='t',
                    choices=['t', 'f'],
                    help='Outputs an unfiltered .csv. Default = t')

parser.add_argument('-c', '--coverage',
                    type=int,
                    help='Minimum coverage to report in an additional output .csv. Default = 1 (Unfiltered)',
                    metavar='Integer')

min_coverage = parser.parse_args().coverage
unfiltered = parser.parse_args().unfiltered
output = parser.parse_args().output

# Save paths for later-use

coge_filtered_path = '%s.filtered.coge.csv' % output
coge_unfiltered_path = '%s.coge.csv' % output

comprehensive_path = None
top_path = None
bottom_path = None
if parser.parse_args().comprehensive:
    comprehensive_path = parser.parse_args().comprehensive
if parser.parse_args().OT:
    top_path = parser.parse_args().OT
if parser.parse_args().OB:
    bottom_path = parser.parse_args().OB

# Determine whether files are valid

if comprehensive_path:
    file_validity(parser, comprehensive_path)
if top_path:
    file_validity(parser, top_path)
if bottom_path:
    file_validity(parser, bottom_path)
if not comprehensive_path and not top_path and not bottom_path:
    exit('You must specify at least one input file!')

# Let the user know it's working

print('Calculating % Methylation on a per Cytosine Basis and formatting for CoGe-import from:')
if comprehensive_path:
    print(comprehensive_path)
if top_path:
    print(top_path)
if bottom_path:
    print(bottom_path)

# Open the Bismark Methylation Extractor files and parse

bismark_data = {}  # Dictionary to store bismark summaries into once parsed

comprehensive_summary = None
top_summary = None
bottom_summary = None

if comprehensive_path:
    comprehensive_tsv = open(comprehensive_path, 'r')
    comprehensive_summary = csv.reader(comprehensive_tsv, delimiter='\t')
    parse_bismark(comprehensive_summary, bismark_data, 'comprehensive')
if top_path:
    top_tsv = open(top_path, 'r')
    top_summary = csv.reader(top_tsv, delimiter='\t')
    parse_bismark(top_summary, bismark_data, 'top')
if bottom_path:
    bottom_tsv = open(bottom_path, 'r')
    bottom_summary = csv.reader(bottom_tsv, delimiter='\t')
    parse_bismark(bottom_summary, bismark_data, 'bottom')

# Iterate over the nested dictionary to get percent methylation as decimal and add as new key:value pair

for chrm in bismark_data:
    for pos in bismark_data[chrm]:
        bismark_data[chrm][pos]['dec_met'] = float(bismark_data[chrm][pos]['metc']) / float(
            bismark_data[chrm][pos]['total'])  # Calculate methylation as a decimal

# Talk to the user

if min_coverage:
    print('Saving CoGe-formatted and coverage-filtered file to:\n',
          coge_filtered_path)
if unfiltered == 't':
    print('Saving CoGe-formatted unfiltered file to:\n',
          coge_unfiltered_path)

# Create an output for CoGe upload

if min_coverage:
    coge_filtered_csv = open(coge_filtered_path, 'w')
    coge_formatted_filtered = csv.writer(coge_filtered_csv)
if unfiltered == 't':
    coge_unfiltered_csv = open(coge_unfiltered_path, 'w')
    coge_formatted_unfiltered = csv.writer(coge_unfiltered_csv)

# Iterate over the dictionary for file-outputs

for chrm in bismark_data:
    for pos in bismark_data[chrm]:
        chrm_key = fix_chromosome_id(chrm)
        pos_key = int(pos) - 1  # Subtract 1 from position to fix alignment with sequence in CoGe
        dec_met = bismark_data[chrm][pos]['dec_met']
        total = bismark_data[chrm][pos]['total']
        strand = bismark_data[chrm][pos]['strand']
        if min_coverage and total >= min_coverage:
            coge_formatted_filtered.writerow(
                [chrm_key, pos_key, pos_key, strand, dec_met, total])  # Output as filtered .csv file
        if unfiltered == 't':
            coge_formatted_unfiltered.writerow(
                [chrm_key, pos_key, pos_key, strand, dec_met, total])  # Output as unfiltered .csv file

print('\nDone!')
